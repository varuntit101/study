name: Deploy Apigee Proxy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-apigee-proxy:
    name: Deploy Product Catalog Proxy
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          install_components: 'beta'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Zip the API Proxy bundle
        run: |
          cd ./product-catalog-v1
          zip -r ../proxy.zip . -x "*.DS_Store"

      - name: Import Bundle via API to Create New Revision
        id: import
        run: |
          TOKEN=$(gcloud auth print-access-token)
          
          IMPORT_OUTPUT=$(curl -s -X POST "https://apigee.googleapis.com/v1/organizations/${{ secrets.GCP_APIGEE_ORG }}/apis?action=import&name=product-catalog-v1" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@proxy.zip")
            
          echo "API Response: $IMPORT_OUTPUT"
          NEW_REVISION=$(echo "$IMPORT_OUTPUT" | jq -r '.revision')
          echo "Discovered new revision: $NEW_REVISION"
          echo "revision_id=$NEW_REVISION" >> "$GITHUB_OUTPUT"

      - name: Deploy New Revision with Zero Downtime
        run: |
          gcloud apigee apis deploy ${{ steps.import.outputs.revision_id }} \
            --api="product-catalog-v1" \
            --environment="eval" \
            --organization="${{ secrets.GCP_APIGEE_ORG }}" \
            --project="${{ secrets.GCP_PROJECT_ID }}" \
            --override
      
      # <<< NEW STEP ADDED HERE >>>
      - name: Automated Smoke Test
        run: |
          # Give the deployment a few seconds to fully propagate
          sleep 15
          
          PROXY_ENDPOINT="https://${{ secrets.APIGEE_HOSTNAME }}/product-catalog-v1/products"
          
          echo "--- Running Test 1: Unauthorized Request ---"
          # Use curl to get only the HTTP status code
          STATUS_CODE_UNAUTHORIZED=$(curl -s -o /dev/null -w "%{http_code}" "$PROXY_ENDPOINT")
          
          if [[ "$STATUS_CODE_UNAUTHORIZED" -ne 401 ]]; then
            echo "Error: Unauthorized test failed! Expected 401, but got $STATUS_CODE_UNAUTHORIZED"
            exit 1
          fi
          echo "Success: Received 401 Unauthorized as expected."

          echo "--- Running Test 2: Authorized Request ---"
          # Make the request and capture the response body and status code
          HTTP_RESPONSE=$(curl -s -w "\nHTTP_STATUS_CODE:%{http_code}" "$PROXY_ENDPOINT?apikey=${{ secrets.APIGEE_API_KEY }}")
          
          # Extract the body and status code
          HTTP_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')
          STATUS_CODE_AUTHORIZED=$(echo "$HTTP_RESPONSE" | tail -n1 | cut -d: -f2)

          if [[ "$STATUS_CODE_AUTHORIZED" -ne 200 ]]; then
            echo "Error: Authorized test failed! Expected 200, but got $STATUS_CODE_AUTHORIZED"
            exit 1
          fi
          echo "Success: Received 200 OK as expected."

          echo "--- Running Test 3: Content Validation ---"
          # Check if the response body contains an expected string
          if ! echo "$HTTP_BODY" | grep -q "Microservices Mug"; then
            echo "Error: Content validation failed! Response did not contain 'Microservices Mug'."
            echo "Response Body: $HTTP_BODY"
            exit 1
          fi
          echo "Success: Response body contains expected content."
          echo "All tests passed!"
